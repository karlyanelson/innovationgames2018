@mixin button-color($mainColor, $accentColor: $white) {
  color: $accentColor;
  background-color: $mainColor;

  &:hover,
  &:focus {
    background-color: darken($mainColor, $hoverColorValue);
  }

  &:focus {
    outline: none;
  }

  &:active,
  &:active:focus {
    background-color: darken($mainColor, $activeColorValue);
  }

  &[disabled="disabled"],
  &.disabled {
    &,
    &:hover {
      background-color: lighten($mainColor, $hoverColorValue);
      cursor: not-allowed;
    }
  }

  &.disabled {
    pointer-events: none;
  }
}

@mixin dismiss-button($mainColor) {
  border-width: 0px;
  color: $mainColor;
  background-color: transparent;

  &:hover,
  &:focus {
    color: darken($mainColor, $activeColorValue);
    background-color: tint($mainColor, 90%);
  }

  &:focus {
    outline: none;
  }

  &:active {
    color: darken($mainColor, $activeColorValue);
    background-color: tint($mainColor, 80%);
  }
}

@mixin colored-row($mainColor) {
  color: shade($mainColor, 40%);
  background-color: tint($mainColor, 80%);
}

@mixin colorize-alert($mainColor) {
  border-color: $mainColor;
  background-color: mix($mainColor, $white, 10%);
  color: shade($mainColor, 40%);
}

@mixin font-smoothing() {
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

@mixin font-awesome() {
  font-family: FontAwesome;
}

@mixin font-awesome-font() {
  font-family: FontAwesome;
  font-style: normal;
  font-weight: normal;
  @include font-smoothing();
}

@mixin roboto-font() {
  font-family: 'Roboto', $sansSerifFont;
  font-style: normal;
  @include font-smoothing();
}

@mixin roboto-font-light() {
  @include roboto-font();
  font-weight: 300;
}

@mixin roboto-font-regular() {
  @include roboto-font();
  font-weight: 400;
}

@mixin roboto-font-medium() {
  @include roboto-font();
  font-weight: 500;
}

@mixin roboto-font-bold() {
  @include roboto-font();
  font-weight: 700;
}

@mixin roboto-font-condensed-normal() {
  font-family: 'Roboto Condensed', $sansSerifFont;
  font-style: normal;
  font-weight: 400;
  @include font-smoothing();
}

@mixin toggle-switch($tsWidth: 40px, $tsHeight: 20px, $tsCheckedColor: $successColor, $tsUncheckedColor: $grayLight, $tsTransitionSpeed: 150ms) {
  // local variables for mixin
  $tsTransitionWidth: $tsWidth - $tsHeight;
  $tsMiddleWidth: $tsHeight - 4px;

  // switch wrapper
  display: inline-block;
  cursor: pointer;
  overflow: hidden;
  position: relative;
  width: $tsWidth;
  height: $tsHeight;
  border-radius: 9999px;
  user-select: none;

  // checkbox input itself
  input[type="checkbox"] {
    display: none;

    // slightly darken the switch when actively clicking
    &:active {
      + label {
        background: darken($tsUncheckedColor, 5%);
      }
    }

    // if checked, toggle should be on the right and use the checked color
    &:checked {
      + label {
        background: $tsCheckedColor;

        &::after {
          transform: translate($tsTransitionWidth, 0px);
        }
      }

      // when actively clicking, darken the switch
      &:active {
        + label {
          background: darken($tsCheckedColor, 5%);
        }
      }
    }
  }

  // the label is the pill
  label {
    display: inline-block;
    position: relative;
    border-radius: 9999px;
    cursor: pointer;
    width: 100%;
    height: 100%;
    background: $tsUncheckedColor;

    // the ::after element is the circle that slides back and forth
    &::after {
      content: '';
      width: $tsMiddleWidth;
      height: $tsMiddleWidth;
      position: absolute;
      top: 2px;
      left: 2px;
      background: rgba(0,0,0,0.4);
      border-radius: 50%;
      transition: all $tsTransitionSpeed ease-out;
    }
  }
}

@mixin placeholder($color) {
  &::-webkit-input-placeholder {
    color: $color;
  }
  &:-moz-placeholder {
    color: $color;
  }
  &::-moz-placeholder {
    color: $color;
  }
  &:-ms-input-placeholder {
    color: $color;
  }
}

// Dynamically generate border classes
// ex: to generate borders with color $red (variable) and class name border-red:
// .borderColorGenerator(~"red", $red)
// NOTE: you do NOT pass the variable name with the $ symbol.
// This would produce the following set of classes:
//
// .border-red { border-color: $red; }
// .border-top-red { border-top-color: $red; }
// .border-right-red { border-right-color: $red; }
// .border-bottom-red { border-bottom-color: $red; }
// .border-left-red { border-left-color: $red; }

@mixin borderColorGenerator($name, $color) {
  .border-#{$name} { border-color: $color; }
  .border-top-#{$name} { border-top-color: $color; }
  .border-right-#{$name} { border-right-color: $color; }
  .border-bottom-#{$name} { border-bottom-color: $color; }
  .border-left-#{$name} { border-left-color: $color; }
}

// Dynamically generate grid column classes
// call this mixin by passing the max number of columns
// you want in the grid. E.g., if you want a 12 column grid,
// call .generateGridColumns(12). This will create classes
// for grids of width 1 column up to 12 columns. It will also
// create classes for all cell width possibilities within that.
// E.g., a grid of 4 columns will get grid-cell classes for
// .col-1-of-4, .col-2-of-4, .col-3-of-4, and .col-4-of-4 with
// the appropriate flex-basis percentages.
// @mixin generateGridColumns($n, $i: 1) when ($i =< $n) {
//   .grid.columns-#{$i} > .grid-cell {
//     flex: 0 0 (100% / $i);
//   }
//
//   @include generateGridCells($i);
//   @include generateGridColumns($n, ($i + 1));
// }
//
// @mixin generateGridCells($n, $i:1) when ($i =< $n) {
//   .grid.columns-#{$n} > .grid-cell.span-#{$i} {
//     flex: 0 0 ($i * 100% / $n);
//   }
//
//   @include generateGridCells($n, ($i + 1));
// }
